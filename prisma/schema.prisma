// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  MENTOR
  INTERN
  ADMIN
}

enum InternCourse {
  BSIT
  BSCS
  BSIS
}

model User {
  id                     String        @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String        @unique
  course                 InternCourse?
  totalHours             Float?
  password               String
  passwordChangeRequired Boolean       @default(true)
  emailVerified          DateTime?
  image                  String?
  role                   UserRole?
  expertise              String?
  attendance             Attendance[]
  isArchived             Boolean       @default(false)
  accounts               Account[]
  sessions               Session[]
  mentorId               String?       @db.ObjectId
  internProfile          Profile?      @relation("UserToProfile")
  mentorProfile          Profile?      @relation("MentorToProfile")
  files                  File[]
  batchId                String?       @db.ObjectId
  tasks                  Task[]        @relation("mentorTask")
  batch                  Batch?        @relation(fields: [batchId], references: [id], onDelete: Cascade)
  createdAt              DateTime      @default(now())
}

enum BatchStatus {
  PENDING
  ONGOING
  COMPLETED
}

model Batch {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  startDate DateTime
  endDate   DateTime?
  status    BatchStatus
  interns   User[]
  createdAt DateTime    @default(now())
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  mentor   User?   @relation("MentorToProfile", fields: [mentorId], references: [id], onDelete: Cascade)
  mentorId String? @unique @db.ObjectId
  user     User    @relation("UserToProfile", fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @unique @db.ObjectId
}

model Attendance {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  internId   String    @db.ObjectId
  date       DateTime?
  timeInAM   DateTime?
  timeOutAM  DateTime?
  timeInPM   DateTime?
  timeOutPM  DateTime?
  totalHours Float?

  intern User @relation(fields: [internId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      TaskStatus
  startDate   DateTime
  endDate     DateTime
  mentorId    String     @db.ObjectId

  mentor      User         @relation("mentorTask", fields: [mentorId], references: [id], onDelete: Cascade)
  files       File[] // A task can have multiple files
  submissions Submission[]
}

model File {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  url    String
  userId String @db.ObjectId
  taskId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Submission {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  url    String
  date   DateTime @default(now())
  taskId String   @db.ObjectId

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
